"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var createKeccakHash=_interopDefault(require("keccak")),varint=_interopDefault(require("varint")),bs32=_interopDefault(require("bs32")),isHex=_interopDefault(require("is-hex")),codecs={"leofcoin-block":{version:"1.0.0",codec:"81",hashAlg:"dbl-keccak-512",testnet:"olivia"},"leofcoin-itx":{version:"1.0.0",codec:"82",hashAlg:"keccak-512",testnet:"olivia"},"leofcoin-pr":{version:"1.0.0",codec:"83",hashAlg:"keccak-256",testnet:"olivia"}};class DiscoHash{constructor(e,t={}){if(t.name?this.name=t.name:this.name="leofcoin-block",t.codecs?this.codecs=t.codecs:this.codecs=codecs,e){if(Buffer.isBuffer(e)){const t=varint.decode(e),s=this.getCodecName(t);s?(this.name=s,this.decode(e)):this.encode(e)}"string"==typeof e?(isHex(e)&&this.fromHex(e),bs32.test(e)&&this.fromBs32(e)):"object"==typeof e&&this.fromJSON(e)}}getCodecName(e){return e=String(e),Object.keys(this.codecs).reduce((t,s)=>this.getCodec(s)===e?s:t,void 0)}getCodec(e){return this.codecs[e].codec}getHashAlg(e){return this.codecs[e].hashAlg}get buffer(){return this.hash}toHex(){return this.toString("hex")}fromHex(e){return this.decode(Buffer.from(e,"hex"))}fromJSON(e){return this.encode(Buffer.from(JSON.stringify(e)))}toBs32(){return bs32.encode(this.hash)}fromBs32(e){return this.decode(bs32.decode(e))}toString(e="utf8"){return this.hash.toString(e)}encode(e,t){!this.name&&t&&(this.name=t);let s=this.getCodec(this.name),i=this.getHashAlg(this.name);return i.includes("dbl")&&(i=i.replace("dbl-",""),e=createKeccakHash(i.replace("-","")).update(e).digest()),e=createKeccakHash(i.replace("-","")).update(e).digest(),this.codec=Buffer.from(varint.encode(s)),this.length=Buffer.from(varint.encode(e.length)),this.prefix=Buffer.concat([this.codec,this.length]),this.hash=Buffer.concat([this.prefix,e]),this.digest=e,this.size=e.length,this.hash}validate(e){if(Buffer.isBuffer(e)){const t=varint.decode(e);this.codecs[t]?this.decode(e):this.encode(e)}"string"==typeof e&&(isHex(e)&&this.fromHex(e),bs32.test(e)&&this.fromBs32(e)),"object"==typeof e&&this.fromJSON(e)}decode(e){this.hash=e;const t=varint.decode(e);if(this.codec=Buffer.from(varint.encode(t)),e=e.slice(varint.decode.bytes),this.size=varint.decode(e),this.length=Buffer.from(varint.encode(this.size)),this.digest=e.slice(varint.decode.bytes),this.digest.length!==this.size)throw new Error(`hash length inconsistent: 0x${this.hash.toString("hex")}`);return this.name=this.getCodecName(t),this.size=this.digest.length,{codec:this.codec,name:this.name,size:this.size,length:this.length,digest:this.digest}}}module.exports=DiscoHash;
